---
import { cn } from "@/lib/utils"
import ToCHeading from "./ToCHeading.astro"

export type ToCHeadingType = {
  depth: number
  slug: string
  text: string
}

export type ToCHeadingsType = ToCHeadingType[]
export type ToCHeadingTypeWithSubItems = ToCHeadingType & { subHeadings: ToCHeadingType[] }

interface Props {
  headings?: ToCHeadingsType
  excludeTitle?: boolean
  class?: string
}

const { headings, excludeTitle = false, class: className } = Astro.props

if (!headings || headings.length === 0 || (headings.length === 1 && excludeTitle)) return null

function buildToC(headings: ToCHeadingsType) {
  const toc: ToCHeadingsType = []
  const parentHeadings = new Map()

  headings.forEach((h: any) => {
    const heading = { ...h, subHeadings: [] }
    parentHeadings.set(heading.depth, heading)
    // Change 2 to 1 if your markdown includes your <h1>
    if (heading.depth === 1) {
      toc.push(heading)
    } else {
      parentHeadings.get(heading.depth).subHeadings.push(heading)
    }
  })
  return toc
}

const toc = buildToC(headings)
---

<nav
  aria-labelledby="doc-outline-aria-label"
  class={cn("text-sm sticky top-20 h-[calc(100vh-3.5rem)] pl-3", className)}
>
  <div>On this page</div>
  <ul>
    {
      toc.map((heading) => {
        return <ToCHeading heading={heading as ToCHeadingTypeWithSubItems} excludeTitle={excludeTitle} />
      })
    }
  </ul>
</nav>
