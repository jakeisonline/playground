---
import { ChevronRight } from "lucide-react"
import { sanitizePathname, toTitleCase } from "@/lib/utils"
import Link from "@/components/ui/Link.astro"

interface Props {
  homeOverridePath?: string
  ignorePaths?: string[]
}

const { homeOverridePath, ignorePaths }: Props = Astro.props

const path = sanitizePathname(Astro.url.pathname)
let crumbs: { name: string; href: string }[] = []

if (path) {
  const paths: string[] = path.split("/")

  // Add home to the crumbs, and override the path if the homeOverridePath prop is set
  crumbs.push({ name: "Home", href: homeOverridePath || "/" })

  for (let i = 1; i < paths.length; i++) {
    // Ignore paths that are defined in the ignorePaths prop
    if (ignorePaths?.includes(paths[i])) continue

    // We'll use the path name as the crumb name
    const name = toTitleCase(paths[i].replace(/-/g, " ") as string)

    crumbs.push({
      name,
      href: `${paths.slice(0, i + 1).join("/")}`,
    })
  }
}
---

<nav aria-label="Breadcrumb">
  <ol
    class="flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5"
  >
    {
      crumbs.map((crumb) => (
        <>
          <li class="inline-flex items-center gap-1.5">
            <Link
              href={crumb.href}
              class={
                crumb.href === path
                  ? "text-foreground"
                  : "text-muted-foreground"
              }
            >
              {crumb.name}
            </Link>
          </li>
          {crumb.href !== path && (
            <li role="presentation" aria-hidden="true" class="[&>svg]:size-3.5">
              <ChevronRight />
            </li>
          )}
        </>
      ))
    }
  </ol>
</nav>
